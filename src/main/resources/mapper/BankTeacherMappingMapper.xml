<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.neuedu.web02.dao.BankTeacherMappingMapper" >
  <resultMap id="BaseResultMap" type="com.neuedu.web02.entity.BankTeacherMapping" >
    <id column="bankid" property="bankid" jdbcType="INTEGER" />
    <id column="teacherid" property="teacherid" jdbcType="INTEGER" />
    <result column="state" property="state" jdbcType="INTEGER" />
    <result column="parentid" property="parentid" jdbcType="INTEGER" />
    <result column="backup1" property="backup1" jdbcType="VARCHAR" />
    <result column="backup2" property="backup2" jdbcType="INTEGER" />
    <result column="backup" property="backup" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    bankid, teacherid, state, parentid, backup1, backup2, backup
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.neuedu.web02.entity.BankTeacherMappingExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from bankteachermapping
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="com.neuedu.web02.entity.BankTeacherMappingKey" >
    select 
    <include refid="Base_Column_List" />
    from bankteachermapping
    where bankid = #{bankid,jdbcType=INTEGER}
      and teacherid = #{teacherid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="com.neuedu.web02.entity.BankTeacherMappingKey" >
    delete from bankteachermapping
    where bankid = #{bankid,jdbcType=INTEGER}
      and teacherid = #{teacherid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.neuedu.web02.entity.BankTeacherMappingExample" >
    delete from bankteachermapping
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.neuedu.web02.entity.BankTeacherMapping" >
    insert into bankteachermapping (bankid, teacherid, state, 
      parentid, backup1, backup2, 
      backup)
    values (#{bankid,jdbcType=INTEGER}, #{teacherid,jdbcType=INTEGER}, #{state,jdbcType=INTEGER}, 
      #{parentid,jdbcType=INTEGER}, #{backup1,jdbcType=VARCHAR}, #{backup2,jdbcType=INTEGER}, 
      #{backup,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.neuedu.web02.entity.BankTeacherMapping" >
    insert into bankteachermapping
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="bankid != null" >
        bankid,
      </if>
      <if test="teacherid != null" >
        teacherid,
      </if>
      <if test="state != null" >
        state,
      </if>
      <if test="parentid != null" >
        parentid,
      </if>
      <if test="backup1 != null" >
        backup1,
      </if>
      <if test="backup2 != null" >
        backup2,
      </if>
      <if test="backup != null" >
        backup,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="bankid != null" >
        #{bankid,jdbcType=INTEGER},
      </if>
      <if test="teacherid != null" >
        #{teacherid,jdbcType=INTEGER},
      </if>
      <if test="state != null" >
        #{state,jdbcType=INTEGER},
      </if>
      <if test="parentid != null" >
        #{parentid,jdbcType=INTEGER},
      </if>
      <if test="backup1 != null" >
        #{backup1,jdbcType=VARCHAR},
      </if>
      <if test="backup2 != null" >
        #{backup2,jdbcType=INTEGER},
      </if>
      <if test="backup != null" >
        #{backup,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.neuedu.web02.entity.BankTeacherMappingExample" resultType="java.lang.Integer" >
    select count(*) from bankteachermapping
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update bankteachermapping
    <set >
      <if test="record.bankid != null" >
        bankid = #{record.bankid,jdbcType=INTEGER},
      </if>
      <if test="record.teacherid != null" >
        teacherid = #{record.teacherid,jdbcType=INTEGER},
      </if>
      <if test="record.state != null" >
        state = #{record.state,jdbcType=INTEGER},
      </if>
      <if test="record.parentid != null" >
        parentid = #{record.parentid,jdbcType=INTEGER},
      </if>
      <if test="record.backup1 != null" >
        backup1 = #{record.backup1,jdbcType=VARCHAR},
      </if>
      <if test="record.backup2 != null" >
        backup2 = #{record.backup2,jdbcType=INTEGER},
      </if>
      <if test="record.backup != null" >
        backup = #{record.backup,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update bankteachermapping
    set bankid = #{record.bankid,jdbcType=INTEGER},
      teacherid = #{record.teacherid,jdbcType=INTEGER},
      state = #{record.state,jdbcType=INTEGER},
      parentid = #{record.parentid,jdbcType=INTEGER},
      backup1 = #{record.backup1,jdbcType=VARCHAR},
      backup2 = #{record.backup2,jdbcType=INTEGER},
      backup = #{record.backup,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.neuedu.web02.entity.BankTeacherMapping" >
    update bankteachermapping
    <set >
      <if test="state != null" >
        state = #{state,jdbcType=INTEGER},
      </if>
      <if test="parentid != null" >
        parentid = #{parentid,jdbcType=INTEGER},
      </if>
      <if test="backup1 != null" >
        backup1 = #{backup1,jdbcType=VARCHAR},
      </if>
      <if test="backup2 != null" >
        backup2 = #{backup2,jdbcType=INTEGER},
      </if>
      <if test="backup != null" >
        backup = #{backup,jdbcType=INTEGER},
      </if>
    </set>
    where bankid = #{bankid,jdbcType=INTEGER}
      and teacherid = #{teacherid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.neuedu.web02.entity.BankTeacherMapping" >
    update bankteachermapping
    set state = #{state,jdbcType=INTEGER},
      parentid = #{parentid,jdbcType=INTEGER},
      backup1 = #{backup1,jdbcType=VARCHAR},
      backup2 = #{backup2,jdbcType=INTEGER},
      backup = #{backup,jdbcType=INTEGER}
    where bankid = #{bankid,jdbcType=INTEGER}
      and teacherid = #{teacherid,jdbcType=INTEGER}
  </update>
  
  <select id="selectShareFromList" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    SELECT *
	FROM bankteachermapping
	WHERE bankid IN (SELECT bankid FROM bankteachermapping WHERE teacherid=#{userid} AND state=0)
	AND (state=2 or state=3)
  </select>
</mapper>